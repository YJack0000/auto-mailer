name: Rust CI

on:
  push:
    branches: [main]

jobs:
  get_package_info:
    name: Get Package Info
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get package name and version from Cargo.toml
        id: package_info
        run: |
          PACKAGE_NAME=$(cargo metadata --format-version=1 | sed -n 's/.*"name": "\([^"]*\)".*/\1/p')
          PACKAGE_VERSION=$(cargo metadata --format-version=1 | sed -n 's/.*"version": "\([^"]*\)".*/\1/p')
          echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV

  build_and_test:
    name: Build and Test
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        name: Checkout code

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

  create_release:
    name: Create Release
    needs: [get_package_info, build_and_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout code

      - name: Setup Release Directory
        run: |
          mkdir -p release

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: release/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          release_name: Release ${{ env.PACKAGE_NAME }} v${{ env.PACKAGE_VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/email_sender
          asset_name: ${{ runner.os == 'Windows' && 'email_sender.exe' || 'email_sender' }}
          asset_content_type: application/octet-stream
