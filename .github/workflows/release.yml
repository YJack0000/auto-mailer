name: Create Release

on:
  push:
    branches: [main]

jobs:
  build_and_test:
    name: Build and Test
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Prepare Windows Artifact Name
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          echo "ARTIFACT_NAME=email_sender.exe" >> $Env:GITHUB_ENV

      - name: Prepare Non-Windows Artifact Name
        if: matrix.os != 'windows-latest'
        run: |
          echo "ARTIFACT_NAME=email_sender" >> $GITHUB_ENV

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-binary
          path: target/release/${{ env.ARTIFACT_NAME }}

  create_release:
    name: Create Release
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get package name and version
        run: |
          PACKAGE_INFO=$(cargo metadata --format-version=1 --no-deps)
          PACKAGE_NAME=$(echo "$PACKAGE_INFO" | python -c "import sys, json; print(json.load(sys.stdin)['packages'][0]['name'])")
          PACKAGE_VERSION=$(echo "$PACKAGE_INFO" | python -c "import sys, json; print(json.load(sys.stdin)['packages'][0]['version'])")
          echo "Package name: $PACKAGE_NAME"
          echo "Package version: $PACKAGE_VERSION"
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
        id: package_info

      - uses: actions/download-artifact@v3
      - name: Display structure of downloaded files
        run: ls -R

      - uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          release_name: v${{ env.PACKAGE_VERSION }}
          draft: false
          prerelease: false

      - name: Upload Ubuntu Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Linux-binary/email_sender
          asset_name: email_sender-linux
          asset_content_type: application/octet-stream

      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macOS-binary/email_sender
          asset_name: email_sender-macOS
          asset_content_type: application/octet-stream

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Windows-binary/email_sender.exe
          asset_name: email_sender-windows.exe
          asset_content_type: application/octet-stream
